-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language LTL.

module AbsLTL where

import qualified PLTL as PLTL
import PLTL ( PLTL )

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Prog = Program [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Monitor MIdent Formula | FullFormula Formula
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Formula
    = Prop PIdent
    | Mon MIdent
    | Not Formula
    | Next Formula
    | Prev Formula
    | Glob Formula
    | Future Formula
    | Once Formula
    | Histor Formula
    | Until Formula Formula
    | Since Formula Formula
    | And Formula Formula
    | Or Formula Formula
    | Impl Formula Formula
    | Iff Formula Formula
  deriving (C.Eq, C.Ord, C.Show, C.Read)

ltlToPltl :: Formula -> PLTL
ltlToPltl (Prop (PIdent p)) = PLTL.Prop PLTL.NotQuoted p
ltlToPltl (Mon (MIdent p)) = PLTL.Prop PLTL.NotQuoted p
ltlToPltl (Not f) = PLTL.UnOp PLTL.Not (ltlToPltl f)
ltlToPltl (Next f) = PLTL.UnOp PLTL.Next (ltlToPltl f)
ltlToPltl (Prev f) = PLTL.UnOp PLTL.Prev (ltlToPltl f)
ltlToPltl (Glob f) = PLTL.UnOp PLTL.Glob (ltlToPltl f)
ltlToPltl (Future f) = PLTL.UnOp PLTL.Fut (ltlToPltl f)
ltlToPltl (Once f) = PLTL.UnOp PLTL.Once (ltlToPltl f)
ltlToPltl (Histor f) = PLTL.UnOp PLTL.Hist (ltlToPltl f)
ltlToPltl (Until f g) = PLTL.BinOp PLTL.Until (ltlToPltl f) (ltlToPltl g)
ltlToPltl (Since f g) = PLTL.BinOp PLTL.Since (ltlToPltl f) (ltlToPltl g)
ltlToPltl (And f g) = PLTL.BinOp PLTL.And (ltlToPltl f) (ltlToPltl g)
ltlToPltl (Or f g) = PLTL.BinOp PLTL.Or (ltlToPltl f) (ltlToPltl g)
ltlToPltl (Impl f g) = PLTL.BinOp PLTL.Impl (ltlToPltl f) (ltlToPltl g)
ltlToPltl (Iff f g) = PLTL.BinOp PLTL.Iff (ltlToPltl f) (ltlToPltl g)

newtype MIdent = MIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PIdent = PIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

